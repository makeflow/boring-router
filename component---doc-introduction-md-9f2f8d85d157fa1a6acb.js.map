{"version":3,"sources":["webpack:///../doc/introduction.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","href","target","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,iJAAgI,0BAAYC,WAAW,KAAvB,kBAAhI,QAAmM,0BAAYA,WAAW,KAAvB,iBAAnM,uKACA,8BACE,iBAAGA,WAAW,cAAd,sBAAkD,mBAAGA,WAAW,KAAQ,CACpE,KAAQ,4BADsC,QAAlD,MAIF,iBAAQ,CACN,GAAM,kBADR,kBAGA,4KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6IAYL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6EAIL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yFAML,6HACA,iBAAQ,CACN,GAAM,mBADR,mBAGA,6GACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6JAUL,2DAA0C,0BAAYA,WAAW,KAAvB,sCAA1C,8GACA,iBAAQ,CACN,GAAM,mBADR,mBAGA,+CAA8B,0BAAYA,WAAW,KAAvB,qBAA9B,MAAkG,0BAAYA,WAAW,KAAvB,sBAAlG,WACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oLAYL,0IAAyH,0BAAYA,WAAW,KAAvB,kBAAzH,qFACA,8BACE,iBAAGA,WAAW,cAAd,wBAAoD,iBAAGC,KAAK,uIAA2IC,OAAO,UAA1J,QAApD,Y,mMAMNN,EAAWO,gBAAiB","file":"component---doc-introduction-md-9f2f8d85d157fa1a6acb.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/root/workspace/boring-router/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <p>{`Boring Router is a state-first router with light-weight route components. It manages observable (MobX) route states like `}<inlineCode parentName=\"p\">{`route.$matched`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`route.$params`}</inlineCode>{`, so the route components as well as your code can react to those states. Boring Router is written in TypeScript and it puts type safety in mind designing the API.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Check out examples `}<a parentName=\"p\" {...{\n          \"href\": \"/boring-router/examples\"\n        }}>{`here`}</a>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"route-notation\"\n    }}>{`Route Notation`}</h2>\n    <p>{`Boring Router uses schema-based, type-safe route notation. You don't need, and it is not recommended to write routes as strings with Boring Router.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const route = router.$route({\n  workbench: {\n    $children: {\n      taskId: {\n        $match: /\\\\d+/,\n      },\n    },\n  },\n});\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Route match={route.workbench.taskId} component={WorkbenchTaskView} />\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Link to={route.workbench.taskId} params={{taskId: '123'}}>\n  Go to Task\n</Link>\n`}</code></pre>\n    <p>{`Route schema can be shared with Node.js backend and this makes route notations type-safe everywhere.`}</p>\n    <h2 {...{\n      \"id\": \"parallel-routes\"\n    }}>{`Parallel Routes`}</h2>\n    <p>{`Views like sidebar, overlay can be easily routed with Boring Router parallel routes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const route = router.$route({\n  /* primary route schema */\n});\n\nconst sidebarRoute = router.$route('sidebar', {\n  /* sidebar route schema */\n});\n`}</code></pre>\n    <p>{`URL for parallel routes looks like `}<inlineCode parentName=\"p\">{`/workbench?_sidebar=/notifications`}</inlineCode>{`. Additional parallel routes work like primary route except that it does not have dedicated query strings.`}</p>\n    <h2 {...{\n      \"id\": \"lifecycle-hooks\"\n    }}>{`Lifecycle Hooks`}</h2>\n    <p>{`Boring Router supports `}<inlineCode parentName=\"p\">{`before/will/after`}</inlineCode>{` x `}<inlineCode parentName=\"p\">{`enter/update/leave`}</inlineCode>{` hooks.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`route.workbench.$beforeEnter(async next => {\n  let {referrer} = next.$params;\n\n  if (await testReferrer(referrer)) {\n    return;\n  }\n\n  route.default.$replace();\n});\n`}</code></pre>\n    <p>{`To support full lifecycle hooks while keeping history navigation behavior right, Boring Router implements its own `}<inlineCode parentName=\"p\">{`BrowserHistory`}</inlineCode>{` with the ability to restore browser history stack according to a given snapshot.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Check out an example `}<a href=\"https://codesandbox.io/s/github/makeflow/boring-router/tree/master/packages/examples/lifecycle-hooks?file=/main.tsx&amp;expanddevtools=1\" target=\"_blank\">{`here`}</a>{`.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}