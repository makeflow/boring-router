(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{Rujb:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return l}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var r=n("/FXl"),o=n("TjRS");n("aD51");function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"doc/introduction.mdx"}});var s={_frontmatter:i},c=o.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(r.b)(c,a({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"introduction"},"Introduction"),Object(r.b)("p",null,"Boring Router is a state-first router with light-weight route components. It manages observable (MobX) route states like ",Object(r.b)("inlineCode",{parentName:"p"},"route.$matched")," and ",Object(r.b)("inlineCode",{parentName:"p"},"route.$params"),", so the route components as well as your code can react to those states. Boring Router is written in TypeScript and it puts type safety in mind designing the API."),Object(r.b)("h2",{id:"route-notation"},"Route Notation"),Object(r.b)("p",null,"Boring Router uses schema-based, type-safe route notation. You don't need, and it is not recommended to write routes as strings with Boring Router."),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-ts"}),"const route = router.$route({\n  workbench: {\n    $children: {\n      taskId: {\n        $match: /\\d+/,\n      },\n    },\n  },\n});\n")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-tsx"}),"<Route match={route.workbench.taskId} component={WorkbenchTaskView} />\n")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-tsx"}),"<Link to={route.workbench.taskId} params={{taskId: '123'}}>\n  Go to Task\n</Link>\n")),Object(r.b)("p",null,"Route schema can be shared with Node.js backend and this makes route notations type-safe everywhere."),Object(r.b)("h2",{id:"parallel-routes"},"Parallel Routes"),Object(r.b)("p",null,"Views like sidebar, overlay can be easily routed with Boring Router parallel routes."),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-ts"}),"const route = router.$route({\n  /* primary route schema */\n});\n\nconst sidebarRoute = router.$route('sidebar', {\n  /* sidebar route shema */\n});\n")),Object(r.b)("p",null,"URL for parallel routes looks like ",Object(r.b)("inlineCode",{parentName:"p"},"/workbench?_sidebar=/notifications"),". Additional parallel routes work like primary route except that it does not have dedicated query strings."),Object(r.b)("h2",{id:"life-cycle-hooks"},"Life-cycle Hooks"),Object(r.b)("p",null,"Boring Router supports ",Object(r.b)("inlineCode",{parentName:"p"},"before/will/after")," x ",Object(r.b)("inlineCode",{parentName:"p"},"enter/update/leave")," hooks."),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-ts"}),"route.workbench.$beforeEnter(async next => {\n  let {referrer} = next.$params;\n\n  if (await testReferrer(referrer)) {\n    return;\n  }\n\n  route.default.$replace();\n});\n")),Object(r.b)("p",null,"To support full life-cycle hooks while keeping history navigation behavior right, Boring Router implements its own ",Object(r.b)("inlineCode",{parentName:"p"},"BrowserHistory")," with the ability to restore browser history stack according to a given snapshot."))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"doc/introduction.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---doc-introduction-mdx-920463d600471fd87f02.js.map