{"version":3,"sources":["webpack:///../doc/references/parallel-routes.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,mNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,iBAAQ,CACN,GAAM,YADR,YAGA,oKACA,uBAAK,sBAAMC,WAAW,OAAU,IAA3B,iDAEL,sBACE,kBAAIA,WAAW,MAAf,gCAAqD,0BAAYA,WAAW,MAAvB,cAArD,6CACA,kBAAIA,WAAW,MAAf,sBAA2C,0BAAYA,WAAW,MAAvB,sBAA3C,4DAAuK,0BAAYA,WAAW,MAAvB,WAAvK,KACA,kBAAIA,WAAW,MAAf,qBAA0C,0BAAYA,WAAW,MAAvB,gBAA1C,cAAkH,sBAAQA,WAAW,MAAnB,UAAlH,8BAEF,6EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yQAqBL,gIAA+G,0BAAYA,WAAW,KAAvB,0BAA/G,aAA+L,0BAAYA,WAAW,KAAvB,8CAA/L,yBAA+S,0BAAYA,WAAW,KAAvB,gCAA/S,sBAA8Y,0BAAYA,WAAW,KAAvB,WAA9Y,qBACA,iBAAQ,CACN,GAAM,6BADR,6BAGA,8PAA6O,0BAAYA,WAAW,KAAvB,gBAA7O,WACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0EAIL,kCAAiB,mBAAGA,WAAW,KAAQ,CACnC,KAAQ,4CADK,iBAAjB,0BAGA,iBAAQ,CACN,GAAM,0BADR,0BAGA,mJ,iNAKJJ,EAAWK,gBAAiB","file":"component---doc-references-parallel-routes-md-81ae55b8a0fd889462da.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/root/workspace/boring-router/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"parallel-routes\"\n    }}>{`Parallel Routes`}</h1>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`We can define multiple routes parallel to each other within a single web app using Boring Router. Let's look at a URL with parallel routes:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/workbench?_overlay=/task/123&mode=default\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The first part of the URL is `}<inlineCode parentName=\"li\">{`/workbench`}</inlineCode>{`, which is the path of the primary route.`}</li>\n      <li parentName=\"ul\">{`The second part is `}<inlineCode parentName=\"li\">{`_overlay=/task/123`}</inlineCode>{`, which includes the name and path of the parallel route `}<inlineCode parentName=\"li\">{`overlay`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`The third part is `}<inlineCode parentName=\"li\">{`mode=default`}</inlineCode>{`, which is `}<strong parentName=\"li\">{`shared`}</strong>{` between parallel routes.`}</li>\n    </ul>\n    <p>{`Creating parallel routes in Boring Router is simple:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const route = router.$({\n  workbench: {\n    $query: {\n      mode: true,\n    },\n  },\n  settings: true,\n});\n\nconst overlayRoute = router.$('overlay', {\n  task: {\n    $children: {\n      taskId: {\n        $match: /\\\\d+/,\n      },\n    },\n  },\n});\n`}</code></pre>\n    <p>{`Navigation using a route object is by default independent to its parallel routes. This means if we call `}<inlineCode parentName=\"p\">{`route.settings.$push()`}</inlineCode>{` with URL `}<inlineCode parentName=\"p\">{`/workbench?_overlay=/task/123&mode=default`}</inlineCode>{`, it will navigate to `}<inlineCode parentName=\"p\">{`/settings?_overlay=/task/123`}</inlineCode>{` while keeping the `}<inlineCode parentName=\"p\">{`overlay`}</inlineCode>{` route untouched.`}</p>\n    <h2 {...{\n      \"id\": \"combining-multiple-routes\"\n    }}>{`Combining Multiple Routes`}</h2>\n    <p>{`Most of the time having routes independent to each other brings convenience, there are still scenarios in which we need to put them together. For example sometimes we might want to navigate with both routes. This can be done with `}<inlineCode parentName=\"p\">{`RouteBuilder`}</inlineCode>{`, e.g.:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`route.workbench.$(overlayRoute.task.taskId, {taskId: 456}).$push();\n`}</code></pre>\n    <p>{`Check out `}<a parentName=\"p\" {...{\n        \"href\": \"/boring-router/references/route-builder\"\n      }}>{`Route Builder`}</a>{` for more information.`}</p>\n    <h2 {...{\n      \"id\": \"experimental-whitelist\"\n    }}>{`Experimental Whitelist`}</h2>\n    <p>{`Parallel routes currently support an experimental whitelist feature, check out the source code for more information.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}